// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                    @id @default(cuid())
  email              String                    @unique
  name               String
  password           String
  avatar             String?
  userId             Int                       @unique @default(autoincrement())
  sessions           Session[]
  notes              Note[]
  accoms             Accommodation[]
  items              MarketplaceItem[]
  studies            StudySession[]
  tasks              Task[]
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  SpotifyAccount SpotifyAccount?
  GeneratedNote GeneratedNote[]
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accommodation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  location  String
  type      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketplaceItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  price       Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudySession {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int? // in minutes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Stores Spotify OAuth tokens for a user
model SpotifyAccount {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String
  refreshToken String
  scope        String?
  tokenType    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


enum NoteQuality {
  SIMPLE
  BALANCED
  DETAILED
}

enum NoteStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

model GeneratedNote {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  content        String?
  quality        NoteQuality
  status         NoteStatus  @default(QUEUED)
  errorMessage   String?
  sourceFileName String
  sourceFileSize Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
