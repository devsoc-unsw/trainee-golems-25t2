// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  avatar    String?
  userId    Int       @unique @default(autoincrement())
  sessions  Session[]
  notes     Note[]
  accoms    Accommodation[]
  items     MarketplaceItem[]
  studies   StudySession[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String   
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accommodation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  location  String
  type      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketplaceItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  price       Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudySession {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime   DateTime        @default(now())
  endTime     DateTime?
}
